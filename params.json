{"name":"Webex","tagline":"webex is html base tool intergrating with jQuery.","body":"Webex is a HTML interface jQuery  plugin\r\n======\r\nThis framework depends on jQuery 1.4+, only need to run `$('body').compile()` to take effects. DOM elements includes class attribution like `.ajax` or `.load` or `.dialog`  and so on will auto trigger ajax post, ajax load(auto cross-domain) or show dialog... That's a comfort way to make one webpage ajaxable.\r\n\r\ncompile.js\r\n------\r\nThe core js is compile.js, all funtions is in the `$.webex` scope.\r\n\r\nIf you need float dialog, the frame invoked a third party dialog for default\r\nhttps://github.com/aui/artDialog (version 4.0+)\r\n\r\nIf you need to use you own dialog, please overload the funtions `$.webex.CreateDialog` and `$.webex.CloseDialog`\r\n\r\nIf you need ajax crossdomain, you can replace the jqeury ajax $.ajax with $.webex.ajax and replace $.load with $.ajaxload, and put jsonp.php on your server(only for php server nowaday, or you can write an jsonp server yourself). $.webex.ajax will auto detect your request domain whether cross or not.\r\n\r\n$.webex scope structure\r\n-------\r\n`$.webex.setting` basic global settings\r\n`$.webex.action` json back action scope\r\n`$.webex.util` common utilities\r\n\r\n$.webex functions and consts\r\n-------\r\n###$.bigpu.  \r\n> alert('message',expired=5000)  \r\n> CreateDialog('html'|'url'|'iframe',{'<html>'}|{'url'},title,width='auto',height='auto',multi=false,resizable=false,buttonok,buttoncancel)  \r\n> ajax(url,'POST'|'GET',data=\"string\"|{object},expired,callback=\"string\"|function(json))  \r\n> cookie(name, [value], [options])  \r\n> \r\n> setting.  \r\n> > autocompile:false #whether to auto $('body').compile() or not  \r\n> > crossdomainserver:'http://www.yourdomain.com/jsonp.php' #jsonp cross domain server script path\r\n> > LastDialogHandle:handle #pop dialog handle,iframe use the parent to close  \r\n> > swfinstallpath: 'expressInstall.swf' #flash swf auto installer path, only div.loadswf needed\r\n> > sessionname: 'PHPSESSID' # cross domain ajax need to get session token from cookie  \r\n> > ajaxparam: 'isAjax' # cross domain ajax needs this HTTP param to declare whether ajax request or not\r\n> \r\n> action.  \r\n> > script(json) #on json.status==1 trigger json.script  \r\n> > redirect(json) #show prompt json.info redirect to json.jumpUrl delay by json.delay*1000  \r\n> > success(json) #show prompt json.info then redirect to json.jumpUrl if url exists  \r\n> > error(json) //show prompt json.info then redirect to json.jumpUrl if url exists.\r\n> > reload(json)  //show prompt json.info for 5s if exists then reload.\r\n> \r\n> util.  \r\n> > toJSON(json_string) #return json object  \r\n> > isIE6()  \r\n> > isIOS()  \r\n> > fixOrientZoom()  \r\n> > substring4ChAndEn(str,length)  \r\n> > ellipse(str,length)  \r\n> > isEmpty(str)  \r\n> > isEmail(str)  \r\n> > isNick(str)  \r\n> > noLink(str)  \r\n> > getPosition(Element)  \r\n> > getDomain(urlstr)  \r\n> > selectall(input[name],'#checkbox_id')  \r\n> > submitByEnter(e,callback)  \r\n> > goTop()  \r\n> > JsonAction(data) #json back to call $.webex.action,the callback name declare in json.data.action  \r\n> > getAbsUrl(url)  \r\n> > crc32(string)  \r\n> > base64_encode(str)  \r\n> > base64_decode(str)  \r\n> > regularTimestamp(timestamp, nowtime=Date(), isNormal=false, showtime=false)\r\n> > setHomePage(obj,url)  \r\n> > addBookmark(title,url)  \r\n> > copyToClipboard(txt)  \r\n\r\nfor scope to take effects:  \r\n   `$('#selector').compile()` \r\nto turn off effects:\r\n   `$('#selector').uncompile()`  \r\nall the server back ajax format must like:  \r\n```\r\n{\r\n\tstatus: 1,\r\n\tinfo: 'back tips',\r\n\tdata: 'back data'\r\n}\r\n```\r\n\r\nHTML Element usage:\r\n------- \r\nthe form below `form.ajax` is the jquery selector, means `<form class=\"ajax\">`, the param tagged '*' is required DOM attribution in the same Element. \r\nExample:\r\n```html\r\n<div class=\"load\" url=\"http://www.domain.com/a.html\"></div>\r\n```\r\nThis will auto load into the DIV with the url content after $().compile.  \r\n\r\n> `form.ajax` use ajax to post instead of redirect  \r\n> > prepare:function, #for validate,submit will break if return false  \r\n> > valid:'false', #submit will break if val(false)  \r\n> > callback:function, #for callback(json)  \r\n> > ajaxmsg:'.class|#id' #the target div will show the submiting tips  \r\n> > inner form: `<input:submit>`  \r\n> > > sync:'message',#on submiting the button title will be changed and submit button disabled, after success will restore  \r\n> \r\n> `div.load` `span.load`  load url content after document is loaded, support different domain  \r\n> > *url:url  \r\n> > callback:function, #ex: `<div class=\"load\" url=\"http://domain.com\" callback=\"cb(data)\"></div>`  \r\n> \r\n> `div.loadswf` #embed flash into div, require swfObject.js \r\n> > *url:url  \r\n> > *width:width  \r\n> > *height:height  \r\n> > flashvars:flashvars&..  \r\n> > params:params&..  \r\n> \r\n> `a.dialog` #click to show dialog  \r\n> > *target:id, #target div id  \r\n> > *type:'url'|'iframe'|'div' #load from url or div? default:url  \r\n> > *href:url, #if type is url  \r\n> > title:'title' #dialog title, default is element context  \r\n> > dwidth:width #default is auto  \r\n> > dheight:height #default is auto  \r\n> > resizable:true  \r\n> > multi:false #if allow multi dialogs  \r\n> > prepare:\"preparefunction()\"  \r\n> > buttonok:\"btnfunc()\"  \r\n> > buttoncancel:\"btncancel()\"  \r\n> \r\n> `a.ajax`  #click to trigger ajax post/get, prepare pointing to prepare function, callback pointing to callback function, callback function first input param is json  \r\n> > *href:url  \r\n> > target:\"#id\" #if target id is not null,will write back the json.info result  \r\n> > method:'POST'|'GET' #default is 'POST'  \r\n> > data:data, #post data  \r\n> > prepare:\"preparefunction()\"  \r\n> > callback:\"callbackfunction(json)\"  \r\n> \r\n> `a.iframe` #click to load iframe into DIV  \r\n> > *target:\"#id\"  \r\n> > *href:url  \r\n> \r\n> `a.div` #click to load URL content into DIV  \r\n> > *href:url  \r\n> > *target:\"#id\"  \r\n> > append:false  #true:append to the end;false: empty the div  \r\n> > ask:'tips'  #if div is not empty, it will alert a tips  \r\n> > prepare:\"preparefunction()\"  \r\n> > callback:\"callbackfunction(json)\"  \r\n> \r\n> `a.popmenu` #click to show pop menu  \r\n> > target:\"#id\"|\".class\"  #default .tooltips in the same div level  \r\n> > onclass:'clicked', //add the class if a is clicked  \r\n> \r\n> `:text.fot` #type words limited  \r\n> > target:id  \r\n> > limit:200  \r\n\r\nLicense\r\n-------\r\nThis is licensed under the GNU LGPL, version 2.1 or later.  \r\n* For details, see: http://creativecommons.org/licenses/LGPL/2.1/  ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}